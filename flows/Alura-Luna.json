{
  "data": {
    "edges": [
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TavilySearchComponent",
            "id": "TavilySearchComponent-42hxI",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-ZX7OC",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__TavilySearchComponent-42hxI{œdataTypeœ:œTavilySearchComponentœ,œidœ:œTavilySearchComponent-42hxIœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-ZX7OC{œfieldNameœ:œtoolsœ,œidœ:œAgent-ZX7OCœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "TavilySearchComponent-42hxI",
        "sourceHandle": "{œdataTypeœ:œTavilySearchComponentœ,œidœ:œTavilySearchComponent-42hxIœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-ZX7OC",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-ZX7OCœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "CurrentDate",
            "id": "CurrentDate-kTvxD",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-ZX7OC",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__CurrentDate-kTvxD{œdataTypeœ:œCurrentDateœ,œidœ:œCurrentDate-kTvxDœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-ZX7OC{œfieldNameœ:œtoolsœ,œidœ:œAgent-ZX7OCœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "CurrentDate-kTvxD",
        "sourceHandle": "{œdataTypeœ:œCurrentDateœ,œidœ:œCurrentDate-kTvxDœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-ZX7OC",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-ZX7OCœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Agent",
            "id": "Agent-ZX7OC",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-80Tqs",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__Agent-ZX7OC{œdataTypeœ:œAgentœ,œidœ:œAgent-ZX7OCœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-80Tqs{œfieldNameœ:œtoolsœ,œidœ:œAgent-80Tqsœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "Agent-ZX7OC",
        "sourceHandle": "{œdataTypeœ:œAgentœ,œidœ:œAgent-ZX7OCœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-80Tqs",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-80Tqsœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Agent",
            "id": "Agent-80Tqs",
            "name": "response",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-nRvQS",
            "inputTypes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__Agent-80Tqs{œdataTypeœ:œAgentœ,œidœ:œAgent-80Tqsœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-nRvQS{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-nRvQSœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "Agent-80Tqs",
        "sourceHandle": "{œdataTypeœ:œAgentœ,œidœ:œAgent-80Tqsœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-nRvQS",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-nRvQSœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Agent",
            "id": "Agent-wEPLW",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-80Tqs",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__Agent-wEPLW{œdataTypeœ:œAgentœ,œidœ:œAgent-wEPLWœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-80Tqs{œfieldNameœ:œtoolsœ,œidœ:œAgent-80Tqsœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "Agent-wEPLW",
        "sourceHandle": "{œdataTypeœ:œAgentœ,œidœ:œAgent-wEPLWœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-80Tqs",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-80Tqsœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TavilySearchComponent",
            "id": "TavilySearchComponent-42hxI",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-wEPLW",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__TavilySearchComponent-42hxI{œdataTypeœ:œTavilySearchComponentœ,œidœ:œTavilySearchComponent-42hxIœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-wEPLW{œfieldNameœ:œtoolsœ,œidœ:œAgent-wEPLWœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "TavilySearchComponent-42hxI",
        "sourceHandle": "{œdataTypeœ:œTavilySearchComponentœ,œidœ:œTavilySearchComponent-42hxIœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-wEPLW",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-wEPLWœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-TKKom",
            "name": "message",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "Agent-80Tqs",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__ChatInput-TKKom{œdataTypeœ:œChatInputœ,œidœ:œChatInput-TKKomœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Agent-80Tqs{œfieldNameœ:œinput_valueœ,œidœ:œAgent-80Tqsœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ChatInput-TKKom",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-TKKomœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Agent-80Tqs",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œAgent-80Tqsœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "GoogleTrendsTool",
            "id": "CustomComponent-FY8vy",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-ZX7OC",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__CustomComponent-FY8vy{œdataTypeœ:œGoogleTrendsToolœ,œidœ:œCustomComponent-FY8vyœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-ZX7OC{œfieldNameœ:œtoolsœ,œidœ:œAgent-ZX7OCœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "CustomComponent-FY8vy",
        "sourceHandle": "{œdataTypeœ:œGoogleTrendsToolœ,œidœ:œCustomComponent-FY8vyœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-ZX7OC",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-ZX7OCœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      }
    ],
    "nodes": [
      {
        "data": {
          "id": "Agent-ZX7OC",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Define the agent's instructions, then enter a task to complete using tools.",
            "display_name": "Agente Buscador",
            "documentation": "",
            "edited": false,
            "field_order": [
              "agent_llm",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout",
              "system_prompt",
              "tools",
              "input_value",
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "agent_description",
              "memory",
              "sender",
              "sender_name",
              "n_messages",
              "session_id",
              "order",
              "template",
              "add_current_date_tool"
            ],
            "frozen": false,
            "icon": "bot",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "hidden": false,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "add_current_date_tool": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Current Date",
                "dynamic": false,
                "info": "If true, will add a tool to the agent that returns the current date.",
                "list": false,
                "list_add_label": "Add More",
                "name": "add_current_date_tool",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "agent_description": {
                "_input_type": "MultilineInput",
                "advanced": true,
                "copy_field": false,
                "display_name": "Agent Description [Deprecated]",
                "dynamic": false,
                "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "agent_description",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "A helpful assistant with access to the following tools:"
              },
              "agent_llm": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Model Provider",
                "dynamic": false,
                "info": "The provider of the language model that the agent will use to generate responses.",
                "input_types": [],
                "name": "agent_llm",
                "options": [
                  "Amazon Bedrock",
                  "Anthropic",
                  "Azure OpenAI",
                  "Google Generative AI",
                  "Groq",
                  "NVIDIA",
                  "OpenAI",
                  "SambaNova",
                  "Custom"
                ],
                "options_metadata": [
                  {
                    "icon": "Amazon"
                  },
                  {
                    "icon": "Anthropic"
                  },
                  {
                    "icon": "Azure"
                  },
                  {
                    "icon": "GoogleGenerativeAI"
                  },
                  {
                    "icon": "Groq"
                  },
                  {
                    "icon": "NVIDIA"
                  },
                  {
                    "icon": "OpenAI"
                  },
                  {
                    "icon": "SambaNova"
                  },
                  {
                    "icon": "brain"
                  }
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "OpenAI"
              },
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "input_types": [],
                "load_from_db": true,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "OPENAI_API_KEY"
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n    MODELS_METADATA,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n            options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())] + [{\"icon\": \"brain\"}],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n\n            # Validate tools\n            if not self.tools:\n                msg = \"Tools are required to run the agent. Please add at least one tool.\"\n                raise ValueError(msg)\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v is not None}\n\n        return await MemoryComponent(**self.get_base_args()).set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                    options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())]\n                    + [{\"icon\": \"brain\"}],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n"
              },
              "handle_parsing_errors": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Handle Parse Errors",
                "dynamic": false,
                "info": "Should the Agent fix errors when reading user input for better processing?",
                "list": false,
                "list_add_label": "Add More",
                "name": "handle_parsing_errors",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "input_value": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "info": "The input provided by the user for the agent to process.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "json_mode": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "JSON Mode",
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "list": false,
                "list_add_label": "Add More",
                "name": "json_mode",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "max_iterations": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Iterations",
                "dynamic": false,
                "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_iterations",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 15
              },
              "max_retries": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Retries",
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_retries",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 5
              },
              "max_tokens": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Tokens",
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_tokens",
                "placeholder": "",
                "range_spec": {
                  "max": 128000,
                  "min": 0,
                  "step": 0.1,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "memory": {
                "_input_type": "HandleInput",
                "advanced": true,
                "display_name": "External Memory",
                "dynamic": false,
                "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                "input_types": [
                  "Memory"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "memory",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "model_kwargs": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "Model Kwargs",
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "list": false,
                "list_add_label": "Add More",
                "name": "model_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {}
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "dialog_inputs": {},
                "display_name": "Model Name",
                "dynamic": false,
                "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.",
                "name": "model_name",
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4.1",
                  "gpt-4.1-mini",
                  "gpt-4.1-nano",
                  "gpt-4.5-preview",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "o1"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": false,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "gpt-4o"
              },
              "n_messages": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Number of Messages",
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "list": false,
                "list_add_label": "Add More",
                "name": "n_messages",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 100
              },
              "openai_api_base": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "OpenAI API Base",
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "openai_api_base",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "order": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Order",
                "dynamic": false,
                "info": "Order of the messages.",
                "name": "order",
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Ascending"
              },
              "seed": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Seed",
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "list": false,
                "list_add_label": "Add More",
                "name": "seed",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Filter by sender type.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine and User"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Filter by sender name.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "system_prompt": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Agent Instructions",
                "dynamic": false,
                "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "system_prompt",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Você é um assistente de pesquisa. Você responde em português brasileiro.\nA sua tarefa é receber um prompt com um tópico e usar a tool de busca \"Tavily Search API\" para recuperar as últimas notícias de lançamentos muito relevantes sobre esse tópico.\nPrimeiramente, você recebe o prompt com o tópico que irá buscar.\nDepois, você usa a tool \"Current Date\" para buscar a data de hoje.\nConsidere um {periodo} que irá considerar a data a partir de 1 mês antes da data de hoje até a data de hoje.\nDepois, você irá usar a tool de busca \"Tavily Search API\", passando o tópico e o {periodo} como parâmetro na sua query de busca, a fim de buscar lançamentos relevantes atuais nessa faixa de tempo.\nFoque em no máximo 10 lançamentos relevantes, com base na quantidade de notícias sobre ele, e também no entusiasmo (positivo ou negativo) dessas notícias. \nSe algum dos tópicos tiver poucas notícias ou reações entusiasmadas (positivas ou negativas), é possível que ele não seja tão relevante assim e pode ser substituído por outro que tenha mais.\nDepois, você irá utilizar a tool \"Google Trends Tool\", passando o tópico como parâmetro na sua query de consulta, a fim de buscar esse tópico no Google Trends.\n\n#####\n\nSeu output final terá o padrão:\n\nData: {DATA DE HOJE}\n\nPeríodo: {periodo}\n\nNotícias:\n{OUTPUT DA TOOL DE BUSCA TAVILY SEARCH}\n\nGoogle Trends:\n{OUTPUT DA TOOL DE GOOGLE TRENDS)"
              },
              "temperature": {
                "_input_type": "SliderInput",
                "advanced": true,
                "display_name": "Temperature",
                "dynamic": false,
                "info": "",
                "max_label": "",
                "max_label_icon": "",
                "min_label": "",
                "min_label_icon": "",
                "name": "temperature",
                "placeholder": "",
                "range_spec": {
                  "max": 1,
                  "min": 0,
                  "step": 0.01,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "title_case": false,
                "tool_mode": false,
                "type": "slider",
                "value": 0.1
              },
              "template": {
                "_input_type": "MultilineInput",
                "advanced": true,
                "copy_field": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{sender_name}: {text}"
              },
              "timeout": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Timeout",
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "list": false,
                "list_add_label": "Add More",
                "name": "timeout",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 700
              },
              "tools": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Tools",
                "dynamic": false,
                "info": "These are the tools that the agent can use to help with tasks.",
                "input_types": [
                  "Tool"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "tools",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "input_value": {
                        "default": "",
                        "description": "The input provided by the user for the agent to process.",
                        "title": "Input Value",
                        "type": "string"
                      },
                      "order": {
                        "default": "Ascending",
                        "description": "Order of the messages.",
                        "enum": [
                          "Ascending",
                          "Descending"
                        ],
                        "title": "Order",
                        "type": "string"
                      }
                    },
                    "description": "A helpful assistant with access to the following tools:",
                    "display_description": "Agent. message_response - Define the agent's instructions, then enter a task to complete using tools.",
                    "display_name": "message_response",
                    "name": "agente_buscador",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "Agent"
                    ]
                  }
                ]
              },
              "verbose": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Verbose",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "verbose",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "Agent"
        },
        "dragging": false,
        "id": "Agent-ZX7OC",
        "measured": {
          "height": 622,
          "width": 320
        },
        "position": {
          "x": 255.28048749715293,
          "y": 202.21507174428515
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "TavilySearchComponent-42hxI",
          "node": {
            "base_classes": [
              "Data",
              "Message"
            ],
            "beta": false,
            "category": "tools",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "**Tavily Search** is a search engine optimized for LLMs and RAG,         aimed at efficient, quick, and persistent search results.",
            "display_name": "Tavily Search API",
            "documentation": "",
            "edited": false,
            "field_order": [
              "api_key",
              "query",
              "search_depth",
              "chunks_per_source",
              "topic",
              "days",
              "max_results",
              "include_answer",
              "time_range",
              "include_images",
              "include_domains",
              "exclude_domains",
              "include_raw_content"
            ],
            "frozen": false,
            "icon": "TavilyIcon",
            "key": "TavilySearchComponent",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "hidden": false,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.12420615100718474,
            "template": {
              "_type": "Component",
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "Tavily API Key",
                "dynamic": false,
                "info": "Your Tavily API Key.",
                "input_types": [],
                "load_from_db": true,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "TAVILY_API_KEY"
              },
              "chunks_per_source": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Chunks Per Source",
                "dynamic": false,
                "info": "The number of content chunks to retrieve from each source (1-3). Only works with advanced search.",
                "list": false,
                "list_add_label": "Add More",
                "name": "chunks_per_source",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 3
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import httpx\nfrom loguru import logger\n\nfrom langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import BoolInput, DropdownInput, IntInput, MessageTextInput, Output, SecretStrInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass TavilySearchComponent(Component):\n    display_name = \"Tavily Search API\"\n    description = \"\"\"**Tavily Search** is a search engine optimized for LLMs and RAG, \\\n        aimed at efficient, quick, and persistent search results.\"\"\"\n    icon = \"TavilyIcon\"\n\n    inputs = [\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Tavily API Key\",\n            required=True,\n            info=\"Your Tavily API Key.\",\n        ),\n        MessageTextInput(\n            name=\"query\",\n            display_name=\"Search Query\",\n            info=\"The search query you want to execute with Tavily.\",\n            tool_mode=True,\n        ),\n        DropdownInput(\n            name=\"search_depth\",\n            display_name=\"Search Depth\",\n            info=\"The depth of the search.\",\n            options=[\"basic\", \"advanced\"],\n            value=\"advanced\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chunks_per_source\",\n            display_name=\"Chunks Per Source\",\n            info=(\"The number of content chunks to retrieve from each source (1-3). Only works with advanced search.\"),\n            value=3,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"topic\",\n            display_name=\"Search Topic\",\n            info=\"The category of the search.\",\n            options=[\"general\", \"news\"],\n            value=\"general\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"days\",\n            display_name=\"Days\",\n            info=\"Number of days back from current date to include. Only available with news topic.\",\n            value=7,\n            advanced=True,\n        ),\n        IntInput(\n            name=\"max_results\",\n            display_name=\"Max Results\",\n            info=\"The maximum number of search results to return.\",\n            value=5,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"include_answer\",\n            display_name=\"Include Answer\",\n            info=\"Include a short answer to original query.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"time_range\",\n            display_name=\"Time Range\",\n            info=\"The time range back from the current date to filter results.\",\n            options=[\"day\", \"week\", \"month\", \"year\"],\n            value=None,  # Default to None to make it optional\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"include_images\",\n            display_name=\"Include Images\",\n            info=\"Include a list of query-related images in the response.\",\n            value=True,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"include_domains\",\n            display_name=\"Include Domains\",\n            info=\"Comma-separated list of domains to include in the search results.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"exclude_domains\",\n            display_name=\"Exclude Domains\",\n            info=\"Comma-separated list of domains to exclude from the search results.\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"include_raw_content\",\n            display_name=\"Include Raw Content\",\n            info=\"Include the cleaned and parsed HTML content of each search result.\",\n            value=False,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"fetch_content\"),\n        Output(display_name=\"Text\", name=\"text\", method=\"fetch_content_text\"),\n    ]\n\n    def fetch_content(self) -> list[Data]:\n        try:\n            # Only process domains if they're provided\n            include_domains = None\n            exclude_domains = None\n\n            if self.include_domains:\n                include_domains = [domain.strip() for domain in self.include_domains.split(\",\") if domain.strip()]\n\n            if self.exclude_domains:\n                exclude_domains = [domain.strip() for domain in self.exclude_domains.split(\",\") if domain.strip()]\n\n            url = \"https://api.tavily.com/search\"\n            headers = {\n                \"content-type\": \"application/json\",\n                \"accept\": \"application/json\",\n            }\n\n            payload = {\n                \"api_key\": self.api_key,\n                \"query\": self.query,\n                \"search_depth\": self.search_depth,\n                \"topic\": self.topic,\n                \"max_results\": self.max_results,\n                \"include_images\": self.include_images,\n                \"include_answer\": self.include_answer,\n                \"include_raw_content\": self.include_raw_content,\n                \"days\": self.days,\n                \"time_range\": self.time_range,\n            }\n\n            # Only add domains to payload if they exist and have values\n            if include_domains:\n                payload[\"include_domains\"] = include_domains\n            if exclude_domains:\n                payload[\"exclude_domains\"] = exclude_domains\n\n            # Add conditional parameters only if they should be included\n            if self.search_depth == \"advanced\" and self.chunks_per_source:\n                payload[\"chunks_per_source\"] = self.chunks_per_source\n\n            if self.topic == \"news\" and self.days:\n                payload[\"days\"] = int(self.days)  # Ensure days is an integer\n\n            # Add time_range if it's set\n            if hasattr(self, \"time_range\") and self.time_range:\n                payload[\"time_range\"] = self.time_range\n\n            # Add timeout handling\n            with httpx.Client(timeout=90.0) as client:\n                response = client.post(url, json=payload, headers=headers)\n\n            response.raise_for_status()\n            search_results = response.json()\n\n            data_results = []\n\n            if self.include_answer and search_results.get(\"answer\"):\n                data_results.append(Data(text=search_results[\"answer\"]))\n\n            for result in search_results.get(\"results\", []):\n                content = result.get(\"content\", \"\")\n                result_data = {\n                    \"title\": result.get(\"title\"),\n                    \"url\": result.get(\"url\"),\n                    \"content\": content,\n                    \"score\": result.get(\"score\"),\n                }\n                if self.include_raw_content:\n                    result_data[\"raw_content\"] = result.get(\"raw_content\")\n\n                data_results.append(Data(text=content, data=result_data))\n\n            if self.include_images and search_results.get(\"images\"):\n                data_results.append(Data(text=\"Images found\", data={\"images\": search_results[\"images\"]}))\n\n        except httpx.TimeoutException:\n            error_message = \"Request timed out (90s). Please try again or adjust parameters.\"\n            logger.error(error_message)\n            return [Data(text=error_message, data={\"error\": error_message})]\n        except httpx.HTTPStatusError as exc:\n            error_message = f\"HTTP error occurred: {exc.response.status_code} - {exc.response.text}\"\n            logger.error(error_message)\n            return [Data(text=error_message, data={\"error\": error_message})]\n        except httpx.RequestError as exc:\n            error_message = f\"Request error occurred: {exc}\"\n            logger.error(error_message)\n            return [Data(text=error_message, data={\"error\": error_message})]\n        except ValueError as exc:\n            error_message = f\"Invalid response format: {exc}\"\n            logger.error(error_message)\n            return [Data(text=error_message, data={\"error\": error_message})]\n        else:\n            self.status = data_results\n            return data_results\n\n    def fetch_content_text(self) -> Message:\n        data = self.fetch_content()\n        result_string = data_to_text(\"{text}\", data)\n        self.status = result_string\n        return Message(text=result_string)\n"
              },
              "days": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Days",
                "dynamic": false,
                "info": "Number of days back from current date to include. Only available with news topic.",
                "list": false,
                "list_add_label": "Add More",
                "name": "days",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 7
              },
              "exclude_domains": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Exclude Domains",
                "dynamic": false,
                "info": "Comma-separated list of domains to exclude from the search results.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "exclude_domains",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "include_answer": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Include Answer",
                "dynamic": false,
                "info": "Include a short answer to original query.",
                "list": false,
                "list_add_label": "Add More",
                "name": "include_answer",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "include_domains": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Include Domains",
                "dynamic": false,
                "info": "Comma-separated list of domains to include in the search results.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "include_domains",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "include_images": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Include Images",
                "dynamic": false,
                "info": "Include a list of query-related images in the response.",
                "list": false,
                "list_add_label": "Add More",
                "name": "include_images",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "include_raw_content": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Include Raw Content",
                "dynamic": false,
                "info": "Include the cleaned and parsed HTML content of each search result.",
                "list": false,
                "list_add_label": "Add More",
                "name": "include_raw_content",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "max_results": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Results",
                "dynamic": false,
                "info": "The maximum number of search results to return.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_results",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 5
              },
              "query": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Search Query",
                "dynamic": false,
                "info": "The search query you want to execute with Tavily.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "query",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "search_depth": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Search Depth",
                "dynamic": false,
                "info": "The depth of the search.",
                "name": "search_depth",
                "options": [
                  "basic",
                  "advanced"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "advanced"
              },
              "time_range": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Time Range",
                "dynamic": false,
                "info": "The time range back from the current date to filter results.",
                "name": "time_range",
                "options": [
                  "day",
                  "week",
                  "month",
                  "year"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str"
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "query": {
                        "default": "",
                        "description": "The search query you want to execute with Tavily.",
                        "title": "Query",
                        "type": "string"
                      }
                    },
                    "description": "TavilySearchComponent. fetch_content - **Tavily Search** is a search engine optimized for LLMs and RAG,         aimed at efficient, quick, and persistent search results.",
                    "display_description": "TavilySearchComponent. fetch_content - **Tavily Search** is a search engine optimized for LLMs and RAG,         aimed at efficient, quick, and persistent search results.",
                    "display_name": "fetch_content",
                    "name": "fetch_content",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "fetch_content"
                    ]
                  },
                  {
                    "args": {
                      "query": {
                        "default": "",
                        "description": "The search query you want to execute with Tavily.",
                        "title": "Query",
                        "type": "string"
                      }
                    },
                    "description": "TavilySearchComponent. fetch_content_text - **Tavily Search** is a search engine optimized for LLMs and RAG,         aimed at efficient, quick, and persistent search results.",
                    "display_description": "TavilySearchComponent. fetch_content_text - **Tavily Search** is a search engine optimized for LLMs and RAG,         aimed at efficient, quick, and persistent search results.",
                    "display_name": "fetch_content_text",
                    "name": "fetch_content_text",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "fetch_content_text"
                    ]
                  }
                ]
              },
              "topic": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Search Topic",
                "dynamic": false,
                "info": "The category of the search.",
                "name": "topic",
                "options": [
                  "general",
                  "news"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "general"
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "TavilySearchComponent"
        },
        "dragging": false,
        "id": "TavilySearchComponent-42hxI",
        "measured": {
          "height": 350,
          "width": 320
        },
        "position": {
          "x": -63.6243179458712,
          "y": 1061.60555657775
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "CurrentDate-kTvxD",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Returns the current date and time in the selected timezone.",
            "display_name": "Current Date",
            "documentation": "",
            "edited": false,
            "field_order": [
              "timezone"
            ],
            "frozen": false,
            "icon": "clock",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "hidden": false,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from datetime import datetime\nfrom zoneinfo import ZoneInfo, available_timezones\n\nfrom loguru import logger\n\nfrom langflow.custom import Component\nfrom langflow.io import DropdownInput, Output\nfrom langflow.schema.message import Message\n\n\nclass CurrentDateComponent(Component):\n    display_name = \"Current Date\"\n    description = \"Returns the current date and time in the selected timezone.\"\n    icon = \"clock\"\n    name = \"CurrentDate\"\n\n    inputs = [\n        DropdownInput(\n            name=\"timezone\",\n            display_name=\"Timezone\",\n            options=list(available_timezones()),\n            value=\"UTC\",\n            info=\"Select the timezone for the current date and time.\",\n            tool_mode=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Current Date\", name=\"current_date\", method=\"get_current_date\"),\n    ]\n\n    def get_current_date(self) -> Message:\n        try:\n            tz = ZoneInfo(self.timezone)\n            current_date = datetime.now(tz).strftime(\"%Y-%m-%d %H:%M:%S %Z\")\n            result = f\"Current date and time in {self.timezone}: {current_date}\"\n            self.status = result\n            return Message(text=result)\n        except Exception as e:  # noqa: BLE001\n            logger.opt(exception=True).debug(\"Error getting current date\")\n            error_message = f\"Error: {e}\"\n            self.status = error_message\n            return Message(text=error_message)\n"
              },
              "timezone": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Timezone",
                "dynamic": false,
                "info": "Select the timezone for the current date and time.",
                "name": "timezone",
                "options": [
                  "ROK",
                  "Africa/Addis_Ababa",
                  "Asia/Macao",
                  "Africa/Mogadishu",
                  "Africa/Bujumbura",
                  "Pacific/Samoa",
                  "Australia/Tasmania",
                  "Europe/Kyiv",
                  "America/St_Lucia",
                  "America/Asuncion",
                  "Europe/Chisinau",
                  "Australia/West",
                  "Asia/Choibalsan",
                  "America/Argentina/Buenos_Aires",
                  "Australia/Yancowinna",
                  "Pacific/Yap",
                  "Asia/Vientiane",
                  "EST",
                  "America/Dawson",
                  "US/Michigan",
                  "America/Noronha",
                  "America/Kentucky/Monticello",
                  "Australia/Darwin",
                  "America/Atikokan",
                  "America/Lima",
                  "Africa/Casablanca",
                  "Asia/Sakhalin",
                  "Etc/GMT-5",
                  "Pacific/Palau",
                  "America/Indiana/Tell_City",
                  "America/Antigua",
                  "Asia/Phnom_Penh",
                  "Asia/Kolkata",
                  "Asia/Tbilisi",
                  "Asia/Samarkand",
                  "America/Miquelon",
                  "Canada/Newfoundland",
                  "America/Jujuy",
                  "America/Argentina/La_Rioja",
                  "Etc/GMT+1",
                  "America/Creston",
                  "America/Ciudad_Juarez",
                  "Africa/Khartoum",
                  "Etc/GMT-9",
                  "Asia/Manila",
                  "Zulu",
                  "America/Panama",
                  "Asia/Saigon",
                  "Asia/Ust-Nera",
                  "US/Aleutian",
                  "Asia/Ashkhabad",
                  "Asia/Novosibirsk",
                  "Australia/Currie",
                  "America/Detroit",
                  "Eire",
                  "America/St_Thomas",
                  "America/Shiprock",
                  "NZ",
                  "Europe/Sarajevo",
                  "Pacific/Tahiti",
                  "Europe/Amsterdam",
                  "America/Port_of_Spain",
                  "Asia/Harbin",
                  "Europe/Paris",
                  "Asia/Jerusalem",
                  "Asia/Tehran",
                  "Australia/Hobart",
                  "Africa/Dar_es_Salaam",
                  "Asia/Amman",
                  "Africa/Kampala",
                  "Australia/Adelaide",
                  "America/Fort_Nelson",
                  "America/North_Dakota/New_Salem",
                  "Asia/Hebron",
                  "Australia/NSW",
                  "America/St_Johns",
                  "Europe/Isle_of_Man",
                  "America/Cancun",
                  "Asia/Jakarta",
                  "Atlantic/South_Georgia",
                  "Europe/San_Marino",
                  "America/Curacao",
                  "Europe/Bucharest",
                  "Etc/GMT-13",
                  "America/Anguilla",
                  "Europe/Skopje",
                  "Europe/Brussels",
                  "Asia/Colombo",
                  "Africa/Harare",
                  "Etc/GMT+4",
                  "Australia/Perth",
                  "Africa/Djibouti",
                  "Asia/Khandyga",
                  "Indian/Christmas",
                  "Europe/Warsaw",
                  "America/Ensenada",
                  "Indian/Mahe",
                  "Australia/LHI",
                  "America/Bogota",
                  "Europe/Gibraltar",
                  "Etc/GMT-11",
                  "Asia/Qyzylorda",
                  "America/Barbados",
                  "Asia/Tel_Aviv",
                  "Asia/Istanbul",
                  "Brazil/East",
                  "Asia/Chongqing",
                  "GMT",
                  "America/Mendoza",
                  "Europe/Volgograd",
                  "Africa/Ceuta",
                  "America/Knox_IN",
                  "Etc/GMT+10",
                  "America/Regina",
                  "CST6CDT",
                  "Europe/Guernsey",
                  "US/Central",
                  "America/Glace_Bay",
                  "America/Caracas",
                  "Canada/Pacific",
                  "US/Eastern",
                  "Africa/Banjul",
                  "Etc/GMT+9",
                  "America/Araguaina",
                  "Africa/Kigali",
                  "America/Guadeloupe",
                  "Africa/Douala",
                  "Atlantic/Azores",
                  "Iran",
                  "Africa/Lagos",
                  "Pacific/Norfolk",
                  "America/Paramaribo",
                  "Africa/Gaborone",
                  "America/Bahia_Banderas",
                  "America/Whitehorse",
                  "America/Punta_Arenas",
                  "Indian/Reunion",
                  "Etc/GMT+0",
                  "Etc/GMT-4",
                  "America/Tegucigalpa",
                  "Asia/Novokuznetsk",
                  "Pacific/Johnston",
                  "Europe/Zaporozhye",
                  "Indian/Maldives",
                  "Asia/Qatar",
                  "Europe/Samara",
                  "Pacific/Ponape",
                  "Africa/Cairo",
                  "America/Scoresbysund",
                  "GMT0",
                  "GB-Eire",
                  "Antarctica/DumontDUrville",
                  "Europe/Tiraspol",
                  "America/Nassau",
                  "Israel",
                  "Pacific/Kwajalein",
                  "Asia/Thimphu",
                  "America/Rio_Branco",
                  "CET",
                  "Pacific/Midway",
                  "Indian/Mauritius",
                  "America/Montreal",
                  "Pacific/Enderbury",
                  "America/Coyhaique",
                  "Australia/North",
                  "America/Argentina/ComodRivadavia",
                  "America/Chihuahua",
                  "Europe/Athens",
                  "Asia/Dhaka",
                  "Asia/Beirut",
                  "Europe/Mariehamn",
                  "Africa/Maputo",
                  "Europe/Zagreb",
                  "Europe/Belgrade",
                  "Etc/GMT",
                  "Australia/Canberra",
                  "Asia/Ulan_Bator",
                  "America/Yakutat",
                  "Pacific/Niue",
                  "Europe/Vilnius",
                  "Asia/Baghdad",
                  "Europe/London",
                  "America/Virgin",
                  "America/Edmonton",
                  "Africa/Ouagadougou",
                  "Africa/Lusaka",
                  "Europe/Malta",
                  "Australia/Lord_Howe",
                  "Canada/Central",
                  "America/Adak",
                  "Arctic/Longyearbyen",
                  "America/Merida",
                  "Asia/Ashgabat",
                  "Africa/Sao_Tome",
                  "Etc/GMT+3",
                  "Pacific/Majuro",
                  "Etc/GMT-0",
                  "Asia/Omsk",
                  "Etc/GMT-14",
                  "America/Belem",
                  "America/Indiana/Indianapolis",
                  "Asia/Chita",
                  "Canada/Atlantic",
                  "America/Guayaquil",
                  "Pacific/Efate",
                  "Asia/Krasnoyarsk",
                  "Asia/Hovd",
                  "Atlantic/Faeroe",
                  "America/Fortaleza",
                  "Africa/Bamako",
                  "EST5EDT",
                  "US/Indiana-Starke",
                  "Pacific/Gambier",
                  "Europe/Busingen",
                  "Africa/Kinshasa",
                  "Europe/Vatican",
                  "Africa/Monrovia",
                  "America/Denver",
                  "Europe/Madrid",
                  "Pacific/Chatham",
                  "America/Indiana/Knox",
                  "America/Nipigon",
                  "Asia/Macau",
                  "PRC",
                  "America/Vancouver",
                  "America/Costa_Rica",
                  "America/Winnipeg",
                  "Africa/Blantyre",
                  "Asia/Kuala_Lumpur",
                  "Asia/Almaty",
                  "Pacific/Wallis",
                  "Asia/Nicosia",
                  "America/Catamarca",
                  "America/Porto_Acre",
                  "Africa/Asmara",
                  "Europe/Uzhgorod",
                  "US/Hawaii",
                  "US/Arizona",
                  "America/Manaus",
                  "Asia/Qostanay",
                  "Pacific/Honolulu",
                  "Asia/Thimbu",
                  "Brazil/Acre",
                  "Singapore",
                  "Etc/GMT-1",
                  "Europe/Sofia",
                  "Asia/Muscat",
                  "Asia/Magadan",
                  "Asia/Taipei",
                  "America/St_Barthelemy",
                  "Europe/Minsk",
                  "Cuba",
                  "America/Louisville",
                  "Etc/GMT-7",
                  "America/Coral_Harbour",
                  "Europe/Saratov",
                  "America/Cayenne",
                  "Asia/Ho_Chi_Minh",
                  "America/Santiago",
                  "Etc/Greenwich",
                  "America/Guyana",
                  "Etc/GMT-8",
                  "Antarctica/Palmer",
                  "Europe/Bratislava",
                  "America/St_Vincent",
                  "Asia/Tokyo",
                  "Portugal",
                  "Canada/Mountain",
                  "America/Buenos_Aires",
                  "America/Cuiaba",
                  "America/El_Salvador",
                  "Europe/Belfast",
                  "Antarctica/McMurdo",
                  "America/Santarem",
                  "Australia/Eucla",
                  "Asia/Kathmandu",
                  "Asia/Vladivostok",
                  "America/Marigot",
                  "GMT+0",
                  "America/Indiana/Marengo",
                  "Africa/Conakry",
                  "Asia/Dubai",
                  "Europe/Jersey",
                  "Africa/Nouakchott",
                  "Libya",
                  "Asia/Pyongyang",
                  "Europe/Astrakhan",
                  "America/Argentina/San_Juan",
                  "America/Swift_Current",
                  "Africa/Dakar",
                  "America/Thule",
                  "America/Bahia",
                  "Asia/Kuwait",
                  "Australia/Sydney",
                  "Iceland",
                  "Europe/Helsinki",
                  "America/Kralendijk",
                  "W-SU",
                  "Asia/Baku",
                  "America/Phoenix",
                  "Africa/Timbuktu",
                  "America/Los_Angeles",
                  "Europe/Simferopol",
                  "Europe/Monaco",
                  "Africa/Luanda",
                  "America/Argentina/Catamarca",
                  "Pacific/Auckland",
                  "Australia/Melbourne",
                  "America/Campo_Grande",
                  "Navajo",
                  "Etc/GMT+11",
                  "America/Inuvik",
                  "Asia/Dushanbe",
                  "Etc/Universal",
                  "America/Aruba",
                  "America/Santa_Isabel",
                  "Pacific/Guam",
                  "Australia/Lindeman",
                  "Australia/Victoria",
                  "America/Argentina/Cordoba",
                  "Africa/Freetown",
                  "Australia/Brisbane",
                  "Greenwich",
                  "Pacific/Easter",
                  "America/Chicago",
                  "MET",
                  "Asia/Oral",
                  "Europe/Kirov",
                  "America/Metlakatla",
                  "Pacific/Kiritimati",
                  "Asia/Urumqi",
                  "Pacific/Port_Moresby",
                  "Africa/Lubumbashi",
                  "Africa/El_Aaiun",
                  "America/North_Dakota/Beulah",
                  "Mexico/BajaNorte",
                  "Europe/Oslo",
                  "Etc/GMT+2",
                  "Atlantic/Canary",
                  "Europe/Stockholm",
                  "Antarctica/Troll",
                  "Africa/Nairobi",
                  "America/Menominee",
                  "America/Sao_Paulo",
                  "Indian/Comoro",
                  "America/Fort_Wayne",
                  "Europe/Vaduz",
                  "Indian/Kerguelen",
                  "America/Dominica",
                  "Africa/Brazzaville",
                  "Asia/Shanghai",
                  "Antarctica/Mawson",
                  "Europe/Podgorica",
                  "America/Guatemala",
                  "America/Indiana/Winamac",
                  "America/Argentina/Rio_Gallegos",
                  "Africa/Asmera",
                  "Europe/Riga",
                  "Pacific/Wake",
                  "Pacific/Tongatapu",
                  "Europe/Tallinn",
                  "Pacific/Rarotonga",
                  "America/Kentucky/Louisville",
                  "Asia/Tomsk",
                  "Pacific/Fiji",
                  "America/Resolute",
                  "Canada/Eastern",
                  "Asia/Jayapura",
                  "Asia/Kuching",
                  "America/Yellowknife",
                  "America/Mexico_City",
                  "Africa/Johannesburg",
                  "Brazil/DeNoronha",
                  "America/Port-au-Prince",
                  "Pacific/Guadalcanal",
                  "Australia/Broken_Hill",
                  "America/Indiana/Vevay",
                  "Africa/Porto-Novo",
                  "US/Alaska",
                  "Etc/UTC",
                  "America/Sitka",
                  "Asia/Srednekolymsk",
                  "Pacific/Bougainville",
                  "WET",
                  "Antarctica/Davis",
                  "Antarctica/Vostok",
                  "America/Santo_Domingo",
                  "HST",
                  "America/Eirunepe",
                  "Pacific/Noumea",
                  "Asia/Barnaul",
                  "Europe/Lisbon",
                  "America/Nuuk",
                  "Canada/Saskatchewan",
                  "America/Tijuana",
                  "Africa/Malabo",
                  "EET",
                  "Africa/Windhoek",
                  "Africa/Tunis",
                  "America/North_Dakota/Center",
                  "America/Atka",
                  "Pacific/Nauru",
                  "Atlantic/St_Helena",
                  "UTC",
                  "Pacific/Fakaofo",
                  "Europe/Dublin",
                  "Egypt",
                  "America/Blanc-Sablon",
                  "Asia/Makassar",
                  "Europe/Luxembourg",
                  "Etc/GMT+5",
                  "America/Indianapolis",
                  "Antarctica/Syowa",
                  "Atlantic/Cape_Verde",
                  "Australia/ACT",
                  "Kwajalein",
                  "Mexico/BajaSur",
                  "MST7MDT",
                  "Asia/Dili",
                  "Asia/Aden",
                  "Antarctica/Macquarie",
                  "America/Hermosillo",
                  "Europe/Prague",
                  "Pacific/Tarawa",
                  "Africa/Bissau",
                  "Europe/Moscow",
                  "Asia/Katmandu",
                  "Europe/Zurich",
                  "Jamaica",
                  "America/Tortola",
                  "Brazil/West",
                  "Pacific/Kanton",
                  "Asia/Ujung_Pandang",
                  "Europe/Kiev",
                  "Asia/Aqtau",
                  "Asia/Bahrain",
                  "Africa/Tripoli",
                  "Etc/Zulu",
                  "America/Cordoba",
                  "Asia/Yakutsk",
                  "Etc/UCT",
                  "Africa/Accra",
                  "America/Cayman",
                  "America/Halifax",
                  "GB",
                  "America/Argentina/Jujuy",
                  "America/Goose_Bay",
                  "Turkey",
                  "Asia/Brunei",
                  "GMT-0",
                  "Africa/Algiers",
                  "Pacific/Pohnpei",
                  "Asia/Kamchatka",
                  "Chile/EasterIsland",
                  "Asia/Chungking",
                  "Europe/Copenhagen",
                  "America/Juneau",
                  "Europe/Kaliningrad",
                  "America/Maceio",
                  "Etc/GMT+12",
                  "Pacific/Funafuti",
                  "Pacific/Saipan",
                  "Japan",
                  "Etc/GMT+7",
                  "Antarctica/Casey",
                  "America/Indiana/Petersburg",
                  "Pacific/Galapagos",
                  "Africa/Ndjamena",
                  "Pacific/Kosrae",
                  "America/Iqaluit",
                  "Atlantic/Jan_Mayen",
                  "Asia/Irkutsk",
                  "Mexico/General",
                  "America/Lower_Princes",
                  "Asia/Riyadh",
                  "Atlantic/Reykjavik",
                  "Europe/Ljubljana",
                  "Asia/Rangoon",
                  "Hongkong",
                  "Asia/Aqtobe",
                  "America/Grenada",
                  "Australia/South",
                  "America/Toronto",
                  "Atlantic/Bermuda",
                  "America/Argentina/San_Luis",
                  "Africa/Niamey",
                  "Asia/Yekaterinburg",
                  "Europe/Berlin",
                  "America/Godthab",
                  "Asia/Dacca",
                  "Chile/Continental",
                  "US/Pacific",
                  "America/Belize",
                  "America/Ojinaga",
                  "Pacific/Pago_Pago",
                  "Atlantic/Madeira",
                  "America/Puerto_Rico",
                  "Etc/GMT-12",
                  "America/Dawson_Creek",
                  "America/Havana",
                  "Europe/Andorra",
                  "Asia/Anadyr",
                  "Etc/GMT-6",
                  "Antarctica/South_Pole",
                  "America/Rankin_Inlet",
                  "America/Cambridge_Bay",
                  "Asia/Calcutta",
                  "America/Rainy_River",
                  "Etc/GMT-2",
                  "Asia/Damascus",
                  "America/Thunder_Bay",
                  "Etc/GMT-10",
                  "America/Montevideo",
                  "Etc/GMT-3",
                  "Australia/Queensland",
                  "Asia/Yangon",
                  "Asia/Singapore",
                  "America/Argentina/Salta",
                  "Africa/Bangui",
                  "Canada/Yukon",
                  "Universal",
                  "America/Boa_Vista",
                  "Factory",
                  "Etc/GMT0",
                  "Africa/Maseru",
                  "America/Argentina/Ushuaia",
                  "Etc/GMT+8",
                  "Africa/Lome",
                  "America/Jamaica",
                  "America/Boise",
                  "America/Monterrey",
                  "America/St_Kitts",
                  "America/Mazatlan",
                  "US/Mountain",
                  "UCT",
                  "Asia/Ulaanbaatar",
                  "US/Samoa",
                  "Asia/Yerevan",
                  "America/Martinique",
                  "America/Anchorage",
                  "Asia/Seoul",
                  "Europe/Budapest",
                  "Asia/Pontianak",
                  "Pacific/Truk",
                  "Asia/Hong_Kong",
                  "Africa/Libreville",
                  "Asia/Bangkok",
                  "Indian/Chagos",
                  "America/Managua",
                  "Asia/Gaza",
                  "America/Montserrat",
                  "Asia/Famagusta",
                  "Europe/Tirane",
                  "America/New_York",
                  "Poland",
                  "America/Porto_Velho",
                  "America/Rosario",
                  "Indian/Mayotte",
                  "Asia/Kabul",
                  "Pacific/Marquesas",
                  "Asia/Atyrau",
                  "Africa/Abidjan",
                  "Atlantic/Stanley",
                  "Etc/GMT+6",
                  "Pacific/Pitcairn",
                  "US/East-Indiana",
                  "Pacific/Chuuk",
                  "Asia/Kashgar",
                  "Asia/Tashkent",
                  "Asia/Karachi",
                  "America/Pangnirtung",
                  "America/Matamoros",
                  "Europe/Vienna",
                  "Atlantic/Faroe",
                  "Europe/Istanbul",
                  "America/La_Paz",
                  "Europe/Nicosia",
                  "Africa/Mbabane",
                  "Africa/Juba",
                  "America/Danmarkshavn",
                  "America/Moncton",
                  "Europe/Rome",
                  "ROC",
                  "MST",
                  "Pacific/Apia",
                  "Indian/Antananarivo",
                  "America/Recife",
                  "America/Nome",
                  "Europe/Ulyanovsk",
                  "Indian/Cocos",
                  "America/Argentina/Tucuman",
                  "NZ-CHAT",
                  "Antarctica/Rothera",
                  "America/Grand_Turk",
                  "PST8PDT",
                  "Asia/Bishkek",
                  "America/Argentina/Mendoza",
                  "America/Indiana/Vincennes"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Brazil/East"
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "timezone": {
                        "default": "UTC",
                        "description": "Select the timezone for the current date and time.",
                        "enum": [
                          "ROK",
                          "Africa/Addis_Ababa",
                          "Asia/Macao",
                          "Africa/Mogadishu",
                          "Africa/Bujumbura",
                          "Pacific/Samoa",
                          "Australia/Tasmania",
                          "Europe/Kyiv",
                          "America/St_Lucia",
                          "America/Asuncion",
                          "Europe/Chisinau",
                          "Australia/West",
                          "Asia/Choibalsan",
                          "America/Argentina/Buenos_Aires",
                          "Australia/Yancowinna",
                          "Pacific/Yap",
                          "Asia/Vientiane",
                          "EST",
                          "America/Dawson",
                          "US/Michigan",
                          "America/Noronha",
                          "America/Kentucky/Monticello",
                          "Australia/Darwin",
                          "America/Atikokan",
                          "America/Lima",
                          "Africa/Casablanca",
                          "Asia/Sakhalin",
                          "Etc/GMT-5",
                          "Pacific/Palau",
                          "America/Indiana/Tell_City",
                          "America/Antigua",
                          "Asia/Phnom_Penh",
                          "Asia/Kolkata",
                          "Asia/Tbilisi",
                          "Asia/Samarkand",
                          "America/Miquelon",
                          "Canada/Newfoundland",
                          "America/Jujuy",
                          "America/Argentina/La_Rioja",
                          "Etc/GMT+1",
                          "America/Creston",
                          "America/Ciudad_Juarez",
                          "Africa/Khartoum",
                          "Etc/GMT-9",
                          "Asia/Manila",
                          "Zulu",
                          "America/Panama",
                          "Asia/Saigon",
                          "Asia/Ust-Nera",
                          "US/Aleutian",
                          "Asia/Ashkhabad",
                          "Asia/Novosibirsk",
                          "Australia/Currie",
                          "America/Detroit",
                          "Eire",
                          "America/St_Thomas",
                          "America/Shiprock",
                          "NZ",
                          "Europe/Sarajevo",
                          "Pacific/Tahiti",
                          "Europe/Amsterdam",
                          "America/Port_of_Spain",
                          "Asia/Harbin",
                          "Europe/Paris",
                          "Asia/Jerusalem",
                          "Asia/Tehran",
                          "Australia/Hobart",
                          "Africa/Dar_es_Salaam",
                          "Asia/Amman",
                          "Africa/Kampala",
                          "Australia/Adelaide",
                          "America/Fort_Nelson",
                          "America/North_Dakota/New_Salem",
                          "Asia/Hebron",
                          "Australia/NSW",
                          "America/St_Johns",
                          "Europe/Isle_of_Man",
                          "America/Cancun",
                          "Asia/Jakarta",
                          "Atlantic/South_Georgia",
                          "Europe/San_Marino",
                          "America/Curacao",
                          "Europe/Bucharest",
                          "Etc/GMT-13",
                          "America/Anguilla",
                          "Europe/Skopje",
                          "Europe/Brussels",
                          "Asia/Colombo",
                          "Africa/Harare",
                          "Etc/GMT+4",
                          "Australia/Perth",
                          "Africa/Djibouti",
                          "Asia/Khandyga",
                          "Indian/Christmas",
                          "Europe/Warsaw",
                          "America/Ensenada",
                          "Indian/Mahe",
                          "Australia/LHI",
                          "America/Bogota",
                          "Europe/Gibraltar",
                          "Etc/GMT-11",
                          "Asia/Qyzylorda",
                          "America/Barbados",
                          "Asia/Tel_Aviv",
                          "Asia/Istanbul",
                          "Brazil/East",
                          "Asia/Chongqing",
                          "GMT",
                          "America/Mendoza",
                          "Europe/Volgograd",
                          "Africa/Ceuta",
                          "America/Knox_IN",
                          "Etc/GMT+10",
                          "America/Regina",
                          "CST6CDT",
                          "Europe/Guernsey",
                          "US/Central",
                          "America/Glace_Bay",
                          "America/Caracas",
                          "Canada/Pacific",
                          "US/Eastern",
                          "Africa/Banjul",
                          "Etc/GMT+9",
                          "America/Araguaina",
                          "Africa/Kigali",
                          "America/Guadeloupe",
                          "Africa/Douala",
                          "Atlantic/Azores",
                          "Iran",
                          "Africa/Lagos",
                          "Pacific/Norfolk",
                          "America/Paramaribo",
                          "Africa/Gaborone",
                          "America/Bahia_Banderas",
                          "America/Whitehorse",
                          "America/Punta_Arenas",
                          "Indian/Reunion",
                          "Etc/GMT+0",
                          "Etc/GMT-4",
                          "America/Tegucigalpa",
                          "Asia/Novokuznetsk",
                          "Pacific/Johnston",
                          "Europe/Zaporozhye",
                          "Indian/Maldives",
                          "Asia/Qatar",
                          "Europe/Samara",
                          "Pacific/Ponape",
                          "Africa/Cairo",
                          "America/Scoresbysund",
                          "GMT0",
                          "GB-Eire",
                          "Antarctica/DumontDUrville",
                          "Europe/Tiraspol",
                          "America/Nassau",
                          "Israel",
                          "Pacific/Kwajalein",
                          "Asia/Thimphu",
                          "America/Rio_Branco",
                          "CET",
                          "Pacific/Midway",
                          "Indian/Mauritius",
                          "America/Montreal",
                          "Pacific/Enderbury",
                          "America/Coyhaique",
                          "Australia/North",
                          "America/Argentina/ComodRivadavia",
                          "America/Chihuahua",
                          "Europe/Athens",
                          "Asia/Dhaka",
                          "Asia/Beirut",
                          "Europe/Mariehamn",
                          "Africa/Maputo",
                          "Europe/Zagreb",
                          "Europe/Belgrade",
                          "Etc/GMT",
                          "Australia/Canberra",
                          "Asia/Ulan_Bator",
                          "America/Yakutat",
                          "Pacific/Niue",
                          "Europe/Vilnius",
                          "Asia/Baghdad",
                          "Europe/London",
                          "America/Virgin",
                          "America/Edmonton",
                          "Africa/Ouagadougou",
                          "Africa/Lusaka",
                          "Europe/Malta",
                          "Australia/Lord_Howe",
                          "Canada/Central",
                          "America/Adak",
                          "Arctic/Longyearbyen",
                          "America/Merida",
                          "Asia/Ashgabat",
                          "Africa/Sao_Tome",
                          "Etc/GMT+3",
                          "Pacific/Majuro",
                          "Etc/GMT-0",
                          "Asia/Omsk",
                          "Etc/GMT-14",
                          "America/Belem",
                          "America/Indiana/Indianapolis",
                          "Asia/Chita",
                          "Canada/Atlantic",
                          "America/Guayaquil",
                          "Pacific/Efate",
                          "Asia/Krasnoyarsk",
                          "Asia/Hovd",
                          "Atlantic/Faeroe",
                          "America/Fortaleza",
                          "Africa/Bamako",
                          "EST5EDT",
                          "US/Indiana-Starke",
                          "Pacific/Gambier",
                          "Europe/Busingen",
                          "Africa/Kinshasa",
                          "Europe/Vatican",
                          "Africa/Monrovia",
                          "America/Denver",
                          "Europe/Madrid",
                          "Pacific/Chatham",
                          "America/Indiana/Knox",
                          "America/Nipigon",
                          "Asia/Macau",
                          "PRC",
                          "America/Vancouver",
                          "America/Costa_Rica",
                          "America/Winnipeg",
                          "Africa/Blantyre",
                          "Asia/Kuala_Lumpur",
                          "Asia/Almaty",
                          "Pacific/Wallis",
                          "Asia/Nicosia",
                          "America/Catamarca",
                          "America/Porto_Acre",
                          "Africa/Asmara",
                          "Europe/Uzhgorod",
                          "US/Hawaii",
                          "US/Arizona",
                          "America/Manaus",
                          "Asia/Qostanay",
                          "Pacific/Honolulu",
                          "Asia/Thimbu",
                          "Brazil/Acre",
                          "Singapore",
                          "Etc/GMT-1",
                          "Europe/Sofia",
                          "Asia/Muscat",
                          "Asia/Magadan",
                          "Asia/Taipei",
                          "America/St_Barthelemy",
                          "Europe/Minsk",
                          "Cuba",
                          "America/Louisville",
                          "Etc/GMT-7",
                          "America/Coral_Harbour",
                          "Europe/Saratov",
                          "America/Cayenne",
                          "Asia/Ho_Chi_Minh",
                          "America/Santiago",
                          "Etc/Greenwich",
                          "America/Guyana",
                          "Etc/GMT-8",
                          "Antarctica/Palmer",
                          "Europe/Bratislava",
                          "America/St_Vincent",
                          "Asia/Tokyo",
                          "Portugal",
                          "Canada/Mountain",
                          "America/Buenos_Aires",
                          "America/Cuiaba",
                          "America/El_Salvador",
                          "Europe/Belfast",
                          "Antarctica/McMurdo",
                          "America/Santarem",
                          "Australia/Eucla",
                          "Asia/Kathmandu",
                          "Asia/Vladivostok",
                          "America/Marigot",
                          "GMT+0",
                          "America/Indiana/Marengo",
                          "Africa/Conakry",
                          "Asia/Dubai",
                          "Europe/Jersey",
                          "Africa/Nouakchott",
                          "Libya",
                          "Asia/Pyongyang",
                          "Europe/Astrakhan",
                          "America/Argentina/San_Juan",
                          "America/Swift_Current",
                          "Africa/Dakar",
                          "America/Thule",
                          "America/Bahia",
                          "Asia/Kuwait",
                          "Australia/Sydney",
                          "Iceland",
                          "Europe/Helsinki",
                          "America/Kralendijk",
                          "W-SU",
                          "Asia/Baku",
                          "America/Phoenix",
                          "Africa/Timbuktu",
                          "America/Los_Angeles",
                          "Europe/Simferopol",
                          "Europe/Monaco",
                          "Africa/Luanda",
                          "America/Argentina/Catamarca",
                          "Pacific/Auckland",
                          "Australia/Melbourne",
                          "America/Campo_Grande",
                          "Navajo",
                          "Etc/GMT+11",
                          "America/Inuvik",
                          "Asia/Dushanbe",
                          "Etc/Universal",
                          "America/Aruba",
                          "America/Santa_Isabel",
                          "Pacific/Guam",
                          "Australia/Lindeman",
                          "Australia/Victoria",
                          "America/Argentina/Cordoba",
                          "Africa/Freetown",
                          "Australia/Brisbane",
                          "Greenwich",
                          "Pacific/Easter",
                          "America/Chicago",
                          "MET",
                          "Asia/Oral",
                          "Europe/Kirov",
                          "America/Metlakatla",
                          "Pacific/Kiritimati",
                          "Asia/Urumqi",
                          "Pacific/Port_Moresby",
                          "Africa/Lubumbashi",
                          "Africa/El_Aaiun",
                          "America/North_Dakota/Beulah",
                          "Mexico/BajaNorte",
                          "Europe/Oslo",
                          "Etc/GMT+2",
                          "Atlantic/Canary",
                          "Europe/Stockholm",
                          "Antarctica/Troll",
                          "Africa/Nairobi",
                          "America/Menominee",
                          "America/Sao_Paulo",
                          "Indian/Comoro",
                          "America/Fort_Wayne",
                          "Europe/Vaduz",
                          "Indian/Kerguelen",
                          "America/Dominica",
                          "Africa/Brazzaville",
                          "Asia/Shanghai",
                          "Antarctica/Mawson",
                          "Europe/Podgorica",
                          "America/Guatemala",
                          "America/Indiana/Winamac",
                          "America/Argentina/Rio_Gallegos",
                          "Africa/Asmera",
                          "Europe/Riga",
                          "Pacific/Wake",
                          "Pacific/Tongatapu",
                          "Europe/Tallinn",
                          "Pacific/Rarotonga",
                          "America/Kentucky/Louisville",
                          "Asia/Tomsk",
                          "Pacific/Fiji",
                          "America/Resolute",
                          "Canada/Eastern",
                          "Asia/Jayapura",
                          "Asia/Kuching",
                          "America/Yellowknife",
                          "America/Mexico_City",
                          "Africa/Johannesburg",
                          "Brazil/DeNoronha",
                          "America/Port-au-Prince",
                          "Pacific/Guadalcanal",
                          "Australia/Broken_Hill",
                          "America/Indiana/Vevay",
                          "Africa/Porto-Novo",
                          "US/Alaska",
                          "Etc/UTC",
                          "America/Sitka",
                          "Asia/Srednekolymsk",
                          "Pacific/Bougainville",
                          "WET",
                          "Antarctica/Davis",
                          "Antarctica/Vostok",
                          "America/Santo_Domingo",
                          "HST",
                          "America/Eirunepe",
                          "Pacific/Noumea",
                          "Asia/Barnaul",
                          "Europe/Lisbon",
                          "America/Nuuk",
                          "Canada/Saskatchewan",
                          "America/Tijuana",
                          "Africa/Malabo",
                          "EET",
                          "Africa/Windhoek",
                          "Africa/Tunis",
                          "America/North_Dakota/Center",
                          "America/Atka",
                          "Pacific/Nauru",
                          "Atlantic/St_Helena",
                          "UTC",
                          "Pacific/Fakaofo",
                          "Europe/Dublin",
                          "Egypt",
                          "America/Blanc-Sablon",
                          "Asia/Makassar",
                          "Europe/Luxembourg",
                          "Etc/GMT+5",
                          "America/Indianapolis",
                          "Antarctica/Syowa",
                          "Atlantic/Cape_Verde",
                          "Australia/ACT",
                          "Kwajalein",
                          "Mexico/BajaSur",
                          "MST7MDT",
                          "Asia/Dili",
                          "Asia/Aden",
                          "Antarctica/Macquarie",
                          "America/Hermosillo",
                          "Europe/Prague",
                          "Pacific/Tarawa",
                          "Africa/Bissau",
                          "Europe/Moscow",
                          "Asia/Katmandu",
                          "Europe/Zurich",
                          "Jamaica",
                          "America/Tortola",
                          "Brazil/West",
                          "Pacific/Kanton",
                          "Asia/Ujung_Pandang",
                          "Europe/Kiev",
                          "Asia/Aqtau",
                          "Asia/Bahrain",
                          "Africa/Tripoli",
                          "Etc/Zulu",
                          "America/Cordoba",
                          "Asia/Yakutsk",
                          "Etc/UCT",
                          "Africa/Accra",
                          "America/Cayman",
                          "America/Halifax",
                          "GB",
                          "America/Argentina/Jujuy",
                          "America/Goose_Bay",
                          "Turkey",
                          "Asia/Brunei",
                          "GMT-0",
                          "Africa/Algiers",
                          "Pacific/Pohnpei",
                          "Asia/Kamchatka",
                          "Chile/EasterIsland",
                          "Asia/Chungking",
                          "Europe/Copenhagen",
                          "America/Juneau",
                          "Europe/Kaliningrad",
                          "America/Maceio",
                          "Etc/GMT+12",
                          "Pacific/Funafuti",
                          "Pacific/Saipan",
                          "Japan",
                          "Etc/GMT+7",
                          "Antarctica/Casey",
                          "America/Indiana/Petersburg",
                          "Pacific/Galapagos",
                          "Africa/Ndjamena",
                          "Pacific/Kosrae",
                          "America/Iqaluit",
                          "Atlantic/Jan_Mayen",
                          "Asia/Irkutsk",
                          "Mexico/General",
                          "America/Lower_Princes",
                          "Asia/Riyadh",
                          "Atlantic/Reykjavik",
                          "Europe/Ljubljana",
                          "Asia/Rangoon",
                          "Hongkong",
                          "Asia/Aqtobe",
                          "America/Grenada",
                          "Australia/South",
                          "America/Toronto",
                          "Atlantic/Bermuda",
                          "America/Argentina/San_Luis",
                          "Africa/Niamey",
                          "Asia/Yekaterinburg",
                          "Europe/Berlin",
                          "America/Godthab",
                          "Asia/Dacca",
                          "Chile/Continental",
                          "US/Pacific",
                          "America/Belize",
                          "America/Ojinaga",
                          "Pacific/Pago_Pago",
                          "Atlantic/Madeira",
                          "America/Puerto_Rico",
                          "Etc/GMT-12",
                          "America/Dawson_Creek",
                          "America/Havana",
                          "Europe/Andorra",
                          "Asia/Anadyr",
                          "Etc/GMT-6",
                          "Antarctica/South_Pole",
                          "America/Rankin_Inlet",
                          "America/Cambridge_Bay",
                          "Asia/Calcutta",
                          "America/Rainy_River",
                          "Etc/GMT-2",
                          "Asia/Damascus",
                          "America/Thunder_Bay",
                          "Etc/GMT-10",
                          "America/Montevideo",
                          "Etc/GMT-3",
                          "Australia/Queensland",
                          "Asia/Yangon",
                          "Asia/Singapore",
                          "America/Argentina/Salta",
                          "Africa/Bangui",
                          "Canada/Yukon",
                          "Universal",
                          "America/Boa_Vista",
                          "Factory",
                          "Etc/GMT0",
                          "Africa/Maseru",
                          "America/Argentina/Ushuaia",
                          "Etc/GMT+8",
                          "Africa/Lome",
                          "America/Jamaica",
                          "America/Boise",
                          "America/Monterrey",
                          "America/St_Kitts",
                          "America/Mazatlan",
                          "US/Mountain",
                          "UCT",
                          "Asia/Ulaanbaatar",
                          "US/Samoa",
                          "Asia/Yerevan",
                          "America/Martinique",
                          "America/Anchorage",
                          "Asia/Seoul",
                          "Europe/Budapest",
                          "Asia/Pontianak",
                          "Pacific/Truk",
                          "Asia/Hong_Kong",
                          "Africa/Libreville",
                          "Asia/Bangkok",
                          "Indian/Chagos",
                          "America/Managua",
                          "Asia/Gaza",
                          "America/Montserrat",
                          "Asia/Famagusta",
                          "Europe/Tirane",
                          "America/New_York",
                          "Poland",
                          "America/Porto_Velho",
                          "America/Rosario",
                          "Indian/Mayotte",
                          "Asia/Kabul",
                          "Pacific/Marquesas",
                          "Asia/Atyrau",
                          "Africa/Abidjan",
                          "Atlantic/Stanley",
                          "Etc/GMT+6",
                          "Pacific/Pitcairn",
                          "US/East-Indiana",
                          "Pacific/Chuuk",
                          "Asia/Kashgar",
                          "Asia/Tashkent",
                          "Asia/Karachi",
                          "America/Pangnirtung",
                          "America/Matamoros",
                          "Europe/Vienna",
                          "Atlantic/Faroe",
                          "Europe/Istanbul",
                          "America/La_Paz",
                          "Europe/Nicosia",
                          "Africa/Mbabane",
                          "Africa/Juba",
                          "America/Danmarkshavn",
                          "America/Moncton",
                          "Europe/Rome",
                          "ROC",
                          "MST",
                          "Pacific/Apia",
                          "Indian/Antananarivo",
                          "America/Recife",
                          "America/Nome",
                          "Europe/Ulyanovsk",
                          "Indian/Cocos",
                          "America/Argentina/Tucuman",
                          "NZ-CHAT",
                          "Antarctica/Rothera",
                          "America/Grand_Turk",
                          "PST8PDT",
                          "Asia/Bishkek",
                          "America/Argentina/Mendoza",
                          "America/Indiana/Vincennes"
                        ],
                        "title": "Timezone",
                        "type": "string"
                      }
                    },
                    "description": "CurrentDate. get_current_date - Returns the current date and time in the selected timezone.",
                    "display_description": "CurrentDate. get_current_date - Returns the current date and time in the selected timezone.",
                    "display_name": "get_current_date",
                    "name": "get_current_date",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "get_current_date"
                    ]
                  }
                ]
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "CurrentDate"
        },
        "dragging": false,
        "id": "CurrentDate-kTvxD",
        "measured": {
          "height": 247,
          "width": 320
        },
        "position": {
          "x": -289.10764502754455,
          "y": 727.0564439027034
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "Agent-80Tqs",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Define the agent's instructions, then enter a task to complete using tools.",
            "display_name": "Agente Orquestrador",
            "documentation": "",
            "edited": false,
            "field_order": [
              "agent_llm",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout",
              "system_prompt",
              "tools",
              "input_value",
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "agent_description",
              "memory",
              "sender",
              "sender_name",
              "n_messages",
              "session_id",
              "order",
              "template",
              "add_current_date_tool"
            ],
            "frozen": false,
            "icon": "bot",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Response",
                "hidden": false,
                "method": "message_response",
                "name": "response",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "add_current_date_tool": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Current Date",
                "dynamic": false,
                "info": "If true, will add a tool to the agent that returns the current date.",
                "list": false,
                "list_add_label": "Add More",
                "name": "add_current_date_tool",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "agent_description": {
                "_input_type": "MultilineInput",
                "advanced": true,
                "copy_field": false,
                "display_name": "Agent Description [Deprecated]",
                "dynamic": false,
                "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "agent_description",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "A helpful assistant with access to the following tools:"
              },
              "agent_llm": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Model Provider",
                "dynamic": false,
                "info": "The provider of the language model that the agent will use to generate responses.",
                "input_types": [],
                "name": "agent_llm",
                "options": [
                  "Amazon Bedrock",
                  "Anthropic",
                  "Azure OpenAI",
                  "Google Generative AI",
                  "Groq",
                  "NVIDIA",
                  "OpenAI",
                  "SambaNova",
                  "Custom"
                ],
                "options_metadata": [
                  {
                    "icon": "Amazon"
                  },
                  {
                    "icon": "Anthropic"
                  },
                  {
                    "icon": "Azure"
                  },
                  {
                    "icon": "GoogleGenerativeAI"
                  },
                  {
                    "icon": "Groq"
                  },
                  {
                    "icon": "NVIDIA"
                  },
                  {
                    "icon": "OpenAI"
                  },
                  {
                    "icon": "SambaNova"
                  },
                  {
                    "icon": "brain"
                  }
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "OpenAI"
              },
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "input_types": [],
                "load_from_db": true,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "OPENAI_API_KEY"
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n    MODELS_METADATA,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n            options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())] + [{\"icon\": \"brain\"}],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n\n            # Validate tools\n            if not self.tools:\n                msg = \"Tools are required to run the agent. Please add at least one tool.\"\n                raise ValueError(msg)\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v is not None}\n\n        return await MemoryComponent(**self.get_base_args()).set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                    options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())]\n                    + [{\"icon\": \"brain\"}],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n"
              },
              "handle_parsing_errors": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Handle Parse Errors",
                "dynamic": false,
                "info": "Should the Agent fix errors when reading user input for better processing?",
                "list": false,
                "list_add_label": "Add More",
                "name": "handle_parsing_errors",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "input_value": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "info": "The input provided by the user for the agent to process.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "json_mode": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "JSON Mode",
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "list": false,
                "list_add_label": "Add More",
                "name": "json_mode",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "max_iterations": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Iterations",
                "dynamic": false,
                "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_iterations",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 15
              },
              "max_retries": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Retries",
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_retries",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 5
              },
              "max_tokens": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Tokens",
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_tokens",
                "placeholder": "",
                "range_spec": {
                  "max": 128000,
                  "min": 0,
                  "step": 0.1,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "memory": {
                "_input_type": "HandleInput",
                "advanced": true,
                "display_name": "External Memory",
                "dynamic": false,
                "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                "input_types": [
                  "Memory"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "memory",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "model_kwargs": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "Model Kwargs",
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "list": false,
                "list_add_label": "Add More",
                "name": "model_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {}
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "dialog_inputs": {},
                "display_name": "Model Name",
                "dynamic": false,
                "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.",
                "name": "model_name",
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4.1",
                  "gpt-4.1-mini",
                  "gpt-4.1-nano",
                  "gpt-4.5-preview",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "o1"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": false,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "gpt-4o-mini"
              },
              "n_messages": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Number of Messages",
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "list": false,
                "list_add_label": "Add More",
                "name": "n_messages",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 100
              },
              "openai_api_base": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "OpenAI API Base",
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "openai_api_base",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "order": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Order",
                "dynamic": false,
                "info": "Order of the messages.",
                "name": "order",
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Ascending"
              },
              "seed": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Seed",
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "list": false,
                "list_add_label": "Add More",
                "name": "seed",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Filter by sender type.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine and User"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Filter by sender name.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "system_prompt": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Agent Instructions",
                "dynamic": false,
                "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "system_prompt",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Você é um orquestrador de agentes de IA. Baseado no prompt do usuário, você decidirá qual agente chamar para realizar a tarefa.\n\nVocê terá acesso a outros 2 agentes:\n- Agente Buscador (busca notícias, trends e lançamentos sobre algum tópico na busca do Google)\n- Agente Redator para LinkedIn (escreve um post no estilo de LinkedIn sobre o tópico pedido)\n\nCaso você receba apenas uma palavra chave, sem mais instruções, assuma que deverá usar o Agente Buscador."
              },
              "temperature": {
                "_input_type": "SliderInput",
                "advanced": true,
                "display_name": "Temperature",
                "dynamic": false,
                "info": "",
                "max_label": "",
                "max_label_icon": "",
                "min_label": "",
                "min_label_icon": "",
                "name": "temperature",
                "placeholder": "",
                "range_spec": {
                  "max": 1,
                  "min": 0,
                  "step": 0.01,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "title_case": false,
                "tool_mode": false,
                "type": "slider",
                "value": 0.1
              },
              "template": {
                "_input_type": "MultilineInput",
                "advanced": true,
                "copy_field": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{sender_name}: {text}"
              },
              "timeout": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Timeout",
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "list": false,
                "list_add_label": "Add More",
                "name": "timeout",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 700
              },
              "tools": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Tools",
                "dynamic": false,
                "info": "These are the tools that the agent can use to help with tasks.",
                "input_types": [
                  "Tool"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "tools",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "verbose": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Verbose",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "verbose",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "Agent"
        },
        "dragging": false,
        "id": "Agent-80Tqs",
        "measured": {
          "height": 624,
          "width": 320
        },
        "position": {
          "x": 682.3617917733344,
          "y": -471.98079209910526
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ChatOutput-nRvQS",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color",
              "clean_data"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "clean_data": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Basic Clean Data",
                "dynamic": false,
                "info": "Whether to clean the data",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from collections.abc import Generator\nfrom typing import Any\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                if data.get_text() is None:\n                    msg = \"Empty Data object\"\n                    raise ValueError(msg)\n                return data.get_text()\n            if isinstance(data, DataFrame):\n                if self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n\n                # Replace pipe characters to avoid markdown table issues\n                processed_data = data.replace(r\"\\|\", r\"\\\\|\", regex=True)\n\n                processed_data = processed_data.map(\n                    lambda x: str(x).replace(\"\\n\", \"<br/>\") if isinstance(x, str) else x\n                )\n\n                return processed_data.to_markdown(index=False)\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([self._safe_convert(item) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return self._safe_convert(self.input_value)\n"
              },
              "data_template": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Data Template",
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "data_template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              },
              "input_value": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as output.",
                "input_types": [
                  "Data",
                  "DataFrame",
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "input_value",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "AI"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": false,
          "type": "ChatOutput"
        },
        "dragging": false,
        "id": "ChatOutput-nRvQS",
        "measured": {
          "height": 66,
          "width": 192
        },
        "position": {
          "x": 1642.8641534084768,
          "y": 132.16947968524516
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "Agent-wEPLW",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Define the agent's instructions, then enter a task to complete using tools.",
            "display_name": "Agente Redator",
            "documentation": "",
            "edited": false,
            "field_order": [
              "agent_llm",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout",
              "system_prompt",
              "tools",
              "input_value",
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "agent_description",
              "memory",
              "sender",
              "sender_name",
              "n_messages",
              "session_id",
              "order",
              "template",
              "add_current_date_tool"
            ],
            "frozen": false,
            "icon": "bot",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "hidden": false,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "add_current_date_tool": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Current Date",
                "dynamic": false,
                "info": "If true, will add a tool to the agent that returns the current date.",
                "list": false,
                "list_add_label": "Add More",
                "name": "add_current_date_tool",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "agent_description": {
                "_input_type": "MultilineInput",
                "advanced": true,
                "copy_field": false,
                "display_name": "Agent Description [Deprecated]",
                "dynamic": false,
                "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "agent_description",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "A helpful assistant with access to the following tools:"
              },
              "agent_llm": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Model Provider",
                "dynamic": false,
                "info": "The provider of the language model that the agent will use to generate responses.",
                "input_types": [],
                "name": "agent_llm",
                "options": [
                  "Amazon Bedrock",
                  "Anthropic",
                  "Azure OpenAI",
                  "Google Generative AI",
                  "Groq",
                  "NVIDIA",
                  "OpenAI",
                  "SambaNova",
                  "Custom"
                ],
                "options_metadata": [
                  {
                    "icon": "Amazon"
                  },
                  {
                    "icon": "Anthropic"
                  },
                  {
                    "icon": "Azure"
                  },
                  {
                    "icon": "GoogleGenerativeAI"
                  },
                  {
                    "icon": "Groq"
                  },
                  {
                    "icon": "NVIDIA"
                  },
                  {
                    "icon": "OpenAI"
                  },
                  {
                    "icon": "SambaNova"
                  },
                  {
                    "icon": "brain"
                  }
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "OpenAI"
              },
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "input_types": [],
                "load_from_db": true,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "OPENAI_API_KEY"
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n    MODELS_METADATA,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n            options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())] + [{\"icon\": \"brain\"}],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n\n            # Validate tools\n            if not self.tools:\n                msg = \"Tools are required to run the agent. Please add at least one tool.\"\n                raise ValueError(msg)\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v is not None}\n\n        return await MemoryComponent(**self.get_base_args()).set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                    options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())]\n                    + [{\"icon\": \"brain\"}],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n"
              },
              "handle_parsing_errors": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Handle Parse Errors",
                "dynamic": false,
                "info": "Should the Agent fix errors when reading user input for better processing?",
                "list": false,
                "list_add_label": "Add More",
                "name": "handle_parsing_errors",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "input_value": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "info": "The input provided by the user for the agent to process.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "json_mode": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "JSON Mode",
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "list": false,
                "list_add_label": "Add More",
                "name": "json_mode",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "max_iterations": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Iterations",
                "dynamic": false,
                "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_iterations",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 15
              },
              "max_retries": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Retries",
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_retries",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 5
              },
              "max_tokens": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Tokens",
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_tokens",
                "placeholder": "",
                "range_spec": {
                  "max": 128000,
                  "min": 0,
                  "step": 0.1,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "memory": {
                "_input_type": "HandleInput",
                "advanced": true,
                "display_name": "External Memory",
                "dynamic": false,
                "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                "input_types": [
                  "Memory"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "memory",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "model_kwargs": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "Model Kwargs",
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "list": false,
                "list_add_label": "Add More",
                "name": "model_kwargs",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {}
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "dialog_inputs": {},
                "display_name": "Model Name",
                "dynamic": false,
                "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.",
                "name": "model_name",
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4.1",
                  "gpt-4.1-mini",
                  "gpt-4.1-nano",
                  "gpt-4.5-preview",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "o1"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": false,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "gpt-4o"
              },
              "n_messages": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Number of Messages",
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "list": false,
                "list_add_label": "Add More",
                "name": "n_messages",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 100
              },
              "openai_api_base": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "OpenAI API Base",
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "openai_api_base",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "order": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Order",
                "dynamic": false,
                "info": "Order of the messages.",
                "name": "order",
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Ascending"
              },
              "seed": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Seed",
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "list": false,
                "list_add_label": "Add More",
                "name": "seed",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Filter by sender type.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine and User"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Filter by sender name.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "system_prompt": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Agent Instructions",
                "dynamic": false,
                "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "system_prompt",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Você é um redator de posts para LinkedIn, que tem acesso a buscas na internet. Você escreve posts para a empresa Alura, a maior escola online de tecnologia do Brasil.\nVocê recebe um tópico sobre o qual deverá escrever um post para LinkedIn. \nInicialmente, você deverá usar a tool \"Tavily Search API\" para buscar online os pontos mais relevantes a abordar em um post sobre esse tópico.\nDepois, com base nos resultados encontrados, crie um plano de ação sobre como você irá estruturar o post.\nDepois, você irá utilizar o tópico, os resultados da sua pesquisa e o plano de ação com os pontos mais relevantes fornecidos e, com base nisso, escreverá um post longo e completo sobre o tema para o LinkedIn.\nO post deve ser engajador, informativo, com linguagem natural e incluir até 5 hashtags no final. Vou te passar abaixo alguns exemplos de posts para que você aprenda o meu tom de escrita:\n\n#####\n\nPOST 1:\n\nVocê sabe quais as diferenças entre aplicativos nativos, web e híbridos? 💻 Continue nesse post que a gente te explica!\n\nAplicativos (ou apps, para quem tem intimidade) são programas criados para ajudar a realizar tarefas específicas no seu dispositivo. Apesar de terem funcionalidades diferentes, foram criados para resolver um problema específico ou facilitar a sua rotina.\n\nEles podem ser classificados como:\n\n1⃣ Aplicativos nativos: são aqueles criados especificamente para uma única plataforma, construídos sob medida para usar todas as funções e capacidades de um sistema operacional específico, garantindo que possam ser usados no aparelho de forma fluida. Podemos citar como exemplos o WhatsApp e o Spotify.\n\n2⃣ Aplicativos web: também conhecidos como PWA (Progressive Web App), esses apps rodam diretamente no navegador, como o Chrome ou Safari. Eles são criados usando tecnologias web, como HTML, CSS e JavaScript, mas projetados para funcionar de forma parecida com um aplicativo nativo. Podemos citar como exemplos as versões web do Google Docs e Trello.\n\n3⃣ Aplicativos híbridos: eles são uma mistura dos anteriores, funcionando em várias plataformas ao mesmo tempo. Nesse caso, uma única base de código pode ser usada em diferentes sistemas, sem a necessidade de alterações para cada um deles, mas com o uso de plugins para acessar os recursos nativos do dispositivo. Podemos citar como exemplos o Instagram e o Uber.\n\n👉 Você já sabia diferenciá-los? Deixe nos comentários!\n\n#alura #programacao #tecnologia #apps #aluradevmobile\n\n#####\n\nPOST 2: \n\nSegundo a Brasscom, o setor deve gerar 797 mil vagas até 2025, com uma média de 150 mil empregos por ano. Porém, a formação atual de profissionais é não é suficiente, o que gera um déficit de 106 mil pessoas qualificadas por ano.\n\nEntão, quem se especializa em sua área de atuação consegue garantir uma vantagem competitiva, principalmente nas áreas com maior crescimento: Inteligência Artificial e Machine Learning, Cibersegurança, Cloud Computing & DevOps, Desenvolvimento Full Stack e Data Science & Análise de Dados.\n\nMas como se destacar em um mercado tão dinâmico? Com uma pós-graduação!\n\nE na nossa Pós Tech você encontra os cursos certos para isso! Com ela, você pode se especializar nas áreas que estão transformando o futuro da tecnologia: Dev, Data, Cyber e Tech & Business.\n\nTudo isso de forma online e hands-on!\n\nNeles, você encontra:\n\n🔹 Aulas com especialistas na área de tecnologia\n🔹 Conteúdo prático e alinhado com o que o mercado exige\n🔹 Networking estratégico com pessoas de diferentes áreas\n🔹 E muito mais!\n\nEm um cenário de transformação digital, investir em uma pós-graduação é mais do que um diferencial: é um passo estratégico para quem quer se destacar.\n\nEncontre o curso que mais combina com os seus objetivos profissionais: https://alura.tv/45q2TCA\n\n#postechalura #alura #tecnologia #programacao\n\n#####\n\nPOST 3:\n\nEstá pensando em mudar de carreira? 👀\n\nEsse momento de transição pode ser um grande desafio, mas também é uma oportunidade de crescimento e novas conquistas profissionais. Pensando nisso, trouxemos 4 dicas que podem te ajudar a tornar essa jornada menos complicada. 😉\n\nConfira:\n\n1⃣ Faça uma retrospectiva: comece o processo de autoconhecimento para entender seus critérios e pontos inegociáveis. Avalie o que você gostava e o que não gostava na sua antiga jornada profissional, porque isso vai ajudar a identificar o que você quer mudar e o que deseja manter.\n\n2⃣ Estude as opções: considere as possibilidades de novas carreiras, avaliando os prós e contras de cada uma. Leve em conta a situação do mercado e as perspectivas econômicas, buscando uma área com a qual você se identifique para tornar a transição mais eficiente!\n\n3⃣ Faça um planejamento financeiro: prepare-se financeiramente para a transição, definindo sua expectativa salarial e avaliando a flexibilidade que você tem em relação a isso.\n\n4⃣ Faça um plano de desenvolvimento de carreira: depois que definir a nova área, crie um plano de estudos focado nas habilidades e competências necessárias. Estabeleça metas e prazos, usando ferramentas para organizar seu planejamento. Você também pode procurar referências e pessoas mentoras da nova área para orientação!\n\n▶ Qual é/foi a sua maior dificuldade na transição de carreira? Responda nos comentários!\n\n#alura #comunidadealura #seumelhormergulho #tecnologia #programacao #estudos #carreiradev\n\n#####\n\nPOST 4:\n\nVocê sabe como é formado um elemento HTML? 👀\n\nEssa é uma linguagem de marcação usada para estruturar o conteúdo da web, formada por elementos que definem como cada parte do conteúdo será exibida, como links, textos destacados ou tamanhos de fonte.\n\nAs principais partes de um elemento HTML são:\n\n🔹 Tag de abertura: composta pelo nome do elemento, envolvido por parênteses angulares de abertura e fechamento (< >). Ela indica onde o elemento começa e onde seu efeito começa a valer.\n\n🔹 Tag de fechamento: parecida com a tag de abertura, mas com uma barra (/) antes do nome do elemento. Ela indica onde o elemento termina.\n\n🔹 Exemplo (para criar um parágrafo): <p>Aqui vai o texto.</p>\n\n🔹 Conteúdo: É o que está entre tag de abertura e a tag de fechamento.\n\n🔹 Elemento: É o conjunto completo, juntando tag de abertura, conteúdo e tag de fechamento.\n\nAlém disso, elementos podem conter atributos, que fornecem informações adicionais que não aparecem diretamente no conteúdo. E essas são as regras essenciais para escrever atributos:\n\n1️⃣ Deve existir um espaço entre o nome do elemento (ou do atributo anterior) e o novo atributo.\n2️⃣ O nome do atributo deve vir seguido de um sinal de igual 😊).\n3️⃣ O valor do atributo deve estar entre aspas (\" \") ou aspas simples (' ').\n\nAgora vai ficar muito mais simples programar com HTML, não é? Se gostou desse conteúdo, compartilhe com a sua rede!\n\n#alura #programacao #dev #frontend #html"
              },
              "temperature": {
                "_input_type": "SliderInput",
                "advanced": true,
                "display_name": "Temperature",
                "dynamic": false,
                "info": "",
                "max_label": "",
                "max_label_icon": "",
                "min_label": "",
                "min_label_icon": "",
                "name": "temperature",
                "placeholder": "",
                "range_spec": {
                  "max": 1,
                  "min": 0,
                  "step": 0.01,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "title_case": false,
                "tool_mode": false,
                "type": "slider",
                "value": 0.1
              },
              "template": {
                "_input_type": "MultilineInput",
                "advanced": true,
                "copy_field": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{sender_name}: {text}"
              },
              "timeout": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Timeout",
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "list": false,
                "list_add_label": "Add More",
                "name": "timeout",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 700
              },
              "tools": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Tools",
                "dynamic": false,
                "info": "These are the tools that the agent can use to help with tasks.",
                "input_types": [
                  "Tool"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "tools",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "input_value": {
                        "default": "",
                        "description": "The input provided by the user for the agent to process.",
                        "title": "Input Value",
                        "type": "string"
                      },
                      "order": {
                        "default": "Ascending",
                        "description": "Order of the messages.",
                        "enum": [
                          "Ascending",
                          "Descending"
                        ],
                        "title": "Order",
                        "type": "string"
                      }
                    },
                    "description": "A helpful assistant with access to the following tools:",
                    "display_description": "Agent. message_response - Define the agent's instructions, then enter a task to complete using tools.",
                    "display_name": "message_response",
                    "name": "agente_redator",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "Agent"
                    ]
                  }
                ]
              },
              "verbose": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Verbose",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "verbose",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "Agent"
        },
        "dragging": false,
        "id": "Agent-wEPLW",
        "measured": {
          "height": 622,
          "width": 320
        },
        "position": {
          "x": 766.5500995347169,
          "y": 210.74064730631642
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "CustomComponent-FY8vy",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Busca dados no Google Trends usando SERP API e formata automaticamente em relatório Markdown legível.",
            "display_name": "Google Trends Tool",
            "documentation": "",
            "edited": true,
            "field_order": [
              "query",
              "serpapi_api_key"
            ],
            "frozen": false,
            "icon": "trending-up",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "hidden": false,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom import Component\r\nfrom langflow.schema import Data\r\nfrom langflow.inputs import MessageTextInput\r\nfrom langflow.template import Output\r\nfrom langchain_community.utilities.google_trends import GoogleTrendsAPIWrapper\r\nimport re\r\n\r\nclass GoogleTrendsUnificado(Component):\r\n    display_name = \"Google Trends Tool\"\r\n    description = \"Busca dados no Google Trends usando SERP API e formata automaticamente em relatório Markdown legível.\"\r\n    icon = \"trending-up\"\r\n    name = \"GoogleTrendsTool\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"query\",\r\n            display_name=\"Consulta\",\r\n            info=\"A palavra-chave ou tópico para buscar no Google Trends.\",\r\n            tool_mode=True\r\n        ),\r\n        MessageTextInput(\r\n            name=\"serpapi_api_key\",\r\n            display_name=\"SERP API Key\",\r\n            info=\"Sua chave secreta da SERP API. A chave ficará visível neste campo.\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(\r\n            display_name=\"Relatório Formatado\",\r\n            name=\"relatorio_completo\",\r\n            method=\"buscar_google_trends\",\r\n        ),\r\n    ]\r\n\r\n    def extrair_valor(self, padrao, texto):\r\n        \"\"\"Função auxiliar para extrair valores usando Regex de forma segura.\"\"\"\r\n        match = re.search(padrao, texto, re.DOTALL)\r\n        return match.group(1).strip() if match else \"N/A\"\r\n\r\n    def buscar_google_trends(self) -> Data:\r\n        # Validação inicial\r\n        if not self.query or not self.serpapi_api_key:\r\n            message = \"❌ A Consulta e a SERP API Key são obrigatórias.\"\r\n            self.status = message\r\n            return Data(text=message)\r\n\r\n        self.status = f\"Buscando tendências para '{self.query}'...\"\r\n        \r\n        try:\r\n            # Buscar dados usando SERP API\r\n            api_wrapper = GoogleTrendsAPIWrapper(serp_api_key=self.serpapi_api_key)\r\n            resultado_bruto = api_wrapper.run(self.query)\r\n            \r\n            self.status = \"Dados obtidos, formatando relatório...\"\r\n            \r\n            # Verificar se houve erro na busca\r\n            if \"Ocorreu um erro\" in resultado_bruto:\r\n                return Data(text=f\"❌ Erro na busca:\\n\\n{resultado_bruto}\")\r\n            \r\n            # Extrair informações do resultado bruto\r\n            query = self.extrair_valor(r\"Query: (.*?)\\n\", resultado_bruto)\r\n            date_from = self.extrair_valor(r\"Date From: (.*?)\\n\", resultado_bruto)\r\n            date_to = self.extrair_valor(r\"Date To: (.*?)\\n\", resultado_bruto)\r\n            avg_value = self.extrair_valor(r\"Average Value: (.*?)\\n\", resultado_bruto)\r\n            percent_change = self.extrair_valor(r\"Percent Change: (.*?)%\\n\", resultado_bruto)\r\n            rising_queries = self.extrair_valor(r\"Rising Related Queries: (.*?)(?:\\n[A-Z]|$)\", resultado_bruto)\r\n            top_queries = self.extrair_valor(r\"Top Related Queries: (.*)\", resultado_bruto)\r\n            \r\n            # Construir relatório formatado\r\n            relatorio = f\"## 📈 Relatório de Tendências para: {query}\\n\\n\"\r\n            relatorio += f\"**Período Analisado:** de {date_from} a {date_to}\\n\\n\"\r\n            \r\n            # Tratamento seguro para valores numéricos\r\n            if avg_value != \"N/A\":\r\n                try:\r\n                    avg_float = float(avg_value)\r\n                    relatorio += f\"**Interesse Médio:** {avg_float:.2f} / 100\\n\\n\"\r\n                except ValueError:\r\n                    relatorio += f\"**Interesse Médio:** {avg_value}\\n\\n\"\r\n            else:\r\n                relatorio += \"**Interesse Médio:** Não disponível\\n\\n\"\r\n            \r\n            if percent_change != \"N/A\":\r\n                try:\r\n                    percent_float = float(percent_change)\r\n                    relatorio += f\"**Crescimento no Período:** `{percent_float:.2f}%`\\n\\n\"\r\n                except ValueError:\r\n                    relatorio += f\"**Crescimento no Período:** {percent_change}%\\n\\n\"\r\n            else:\r\n                relatorio += \"**Crescimento no Período:** Não disponível\\n\\n\"\r\n            \r\n            # Tópicos em ascensão\r\n            if rising_queries != \"N/A\" and rising_queries:\r\n                relatorio += \"### 🔥 Tópicos em Ascensão\\n\"\r\n                relatorio += \"*Estes são os termos com maior crescimento percentual, indicando o que há de novo e quente.*\\n\"\r\n                for item in rising_queries.split(', '):\r\n                    if item.strip():\r\n                        relatorio += f\"- {item.strip()}\\n\"\r\n            else:\r\n                relatorio += \"### 🔥 Tópicos em Ascensão\\n\"\r\n                relatorio += \"*Nenhum tópico em ascensão encontrado para este período.*\\n\"\r\n            \r\n            # Tópicos populares\r\n            relatorio += \"\\n\"\r\n            if top_queries != \"N/A\" and top_queries:\r\n                relatorio += \"### 🏆 Tópicos Mais Populares\\n\"\r\n                relatorio += \"*Estes são os termos com maior volume de busca, mostrando o contexto geral do interesse.*\\n\"\r\n                for item in top_queries.split(', '):\r\n                    if item.strip():\r\n                        relatorio += f\"- {item.strip()}\\n\"\r\n            else:\r\n                relatorio += \"### 🏆 Tópicos Mais Populares\\n\"\r\n                relatorio += \"*Nenhum tópico popular encontrado para este período.*\\n\"\r\n            \r\n            self.status = \"Relatório gerado com sucesso!\"\r\n            return Data(text=relatorio)\r\n            \r\n        except Exception as e:\r\n            error_message = f\"❌ Ocorreu um erro ao buscar ou formatar os dados: {str(e)}\"\r\n            self.status = \"Erro na execução.\"\r\n            return Data(text=error_message)"
              },
              "query": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Consulta",
                "dynamic": false,
                "info": "A palavra-chave ou tópico para buscar no Google Trends.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "query",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "serpapi_api_key": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "SERP API Key",
                "dynamic": false,
                "info": "Sua chave secreta da SERP API. A chave ficará visível neste campo.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": true,
                "name": "serpapi_api_key",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "SERP_API_KEY"
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "query": {
                        "default": "",
                        "description": "A palavra-chave ou tópico para buscar no Google Trends.",
                        "title": "Query",
                        "type": "string"
                      }
                    },
                    "description": "GoogleTrendsTool. buscar_google_trends - Busca dados no Google Trends usando SERP API e formata automaticamente em relatório Markdown legível.",
                    "display_description": "GoogleTrendsTool. buscar_google_trends - Busca dados no Google Trends usando SERP API e formata automaticamente em relatório Markdown legível.",
                    "display_name": "buscar_google_trends",
                    "name": "buscar_google_trends",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "buscar_google_trends"
                    ]
                  }
                ]
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "GoogleTrendsTool"
        },
        "dragging": false,
        "id": "CustomComponent-FY8vy",
        "measured": {
          "height": 350,
          "width": 320
        },
        "position": {
          "x": 524.364433652094,
          "y": 1086.977836322145
        },
        "selected": true,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ChatInput-TKKom",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get chat inputs from the Playground.",
            "display_name": "Chat Input",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files",
              "background_color",
              "chat_icon",
              "text_color"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.4.2",
            "metadata": {},
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n            temp_file=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
              },
              "files": {
                "_input_type": "FileInput",
                "advanced": true,
                "display_name": "Files",
                "dynamic": false,
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "file_path": "",
                "info": "Files to be sent with the message.",
                "list": true,
                "list_add_label": "Add More",
                "name": "files",
                "placeholder": "",
                "required": false,
                "show": true,
                "temp_file": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as input.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": false,
          "type": "ChatInput"
        },
        "id": "ChatInput-TKKom",
        "measured": {
          "height": 66,
          "width": 192
        },
        "position": {
          "x": 126.29629820821512,
          "y": -25.118403522127956
        },
        "selected": false,
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 143.42932693466867,
      "y": 228.1364103669814,
      "zoom": 0.4818415279045451
    }
  },
  "description": "",
  "endpoint_name": null,
  "id": "ef9456d7-1327-4571-8897-c27895b4d8f0",
  "is_component": false,
  "last_tested_version": "1.4.2",
  "name": "Alura - Luna",
  "tags": []
}